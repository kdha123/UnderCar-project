package com.undercar.sell.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import com.undercar.attachment.dto.AttachmentDTO;
import com.undercar.caroption.dto.CarOptionDTO;
import com.undercar.category.dto.CategoryDTO;
import com.undercar.sell.dto.SellDTO;
import com.undercar.util.db.DBUtil;
import com.undercar.util.page.PageObject;

public class SellDAO {

	public List<Object> list(PageObject pageObject)throws Exception{
		
		System.out.println("SellDAO.list()");
		
		List<Object> list = null;
		
		Connection con = DBUtil.getConnection();
		
		String sql = " select s.no, s.title, s.condition, s.hit, a.file1 from sell s, attachment a "
				+ " where s.no = a.sell_no ";
		
		// 검색 sql 부분
//		sql +="";
		
		sql += " order by s.no desc, s.condition desc ";
		
		sql += " select rownum rnum, no, title, condition, hit, file1 "
				+ " from (" + sql + ") ";
		
		sql += " select * from (" + sql + ") "
				+ " where rnum between ? and ? ";
		System.out.println("SellDAO.list().sql:" + sql);
		
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		int idx = 1;
		// 검색
//		idx = SerchCondition.setPreparedStatement(pstmt, pageObject, idx);
		
		pstmt.setInt(idx++, pageObject.getStartRow());
		pstmt.setInt(idx++, pageObject.getEndRow());
		
		ResultSet rs = pstmt.executeQuery();
		
		if(rs != null) {
			while(rs.next()) {
				if(list == null) list = new ArrayList<Object>();
				
				SellDTO dto = new SellDTO();
				AttachmentDTO adto = new AttachmentDTO();
				dto.setNo(rs.getInt("no"));
				dto.setContent(rs.getString("title"));
				dto.setCondition(rs.getInt("condition"));
				dto.setHit(rs.getInt("hit"));
				adto.setFile1(rs.getString("file1"));
				list.add(dto);
				list.add(adto);
				
			}// end of while
		}// end of if
		DBUtil.close(con, pstmt, rs);
		
		System.out.println("SellDAO.list().list:" + list);
		
		return list;
		
	}// end of list
	
	public int getTotalRow(PageObject pageObject)throws Exception{
		
		System.out.println("SellDAO.getTotal?Row()");
		
		int totalRow = 0;
		
		Connection con = DBUtil.getConnection();
		
		String sql = " select count (*) cnt from sell ";
	
		// 검색
//		sql += SearchCondition.getSearchSQLWithWhere(pageObject);
		
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		int idx = 1 ;
		
		// 검색
//		idx = SearchCondition.getPreparedStatement(pstmt, pageObject, idx);
		
		ResultSet rs = pstmt.executeQuery();
		
		if(rs != null && rs.next()) {
			
			totalRow = rs.getInt("cnt");
		}// end of if
		
		return totalRow;
	}// end of getTotalRow
	
	public int sellWrite(SellDTO dto)throws Exception{
		
		System.out.println("SellDAO.write().dto" + dto);
		
		Connection con = DBUtil.getConnection();
		
		String sql1 = " insert into sell(no, condition, grade, content, writer) "
				+ " values(sell_seq.nextval, ?, ?, ?, ?) ";
		
		PreparedStatement pstmt = con.prepareStatement(sql1);
		
		System.out.println("SellDAO.sellWrite().sql1:"+sql1);
		pstmt.setInt(1, dto.getCondition());
		pstmt.setInt(2, dto.getGrade());
		pstmt.setString(3, dto.getContent());
		pstmt.setString(4, dto.getWriter());
		
		int result = pstmt.executeUpdate();
				
		System.out.println("글쓰기 성공");
		
		DBUtil.close(con, pstmt);
		
		return result;
		
	}// end of write
				
	public int attachmentWrite(SellDTO dto, AttachmentDTO adto)throws Exception{
		
		Connection con = DBUtil.getConnection();
		
		String sql2 = " insert into attachment( no, sell_no, file1, file2, file3, file4, file5, file6, file7, file8, file9, file10, "
				+ " file11, file12, file13, file14, file15, file16, file17, file18, file19, file20) "
				+ " values(attachment_seq.nextval, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
		//                                         1              6             11             16              21
		
		PreparedStatement pstmt = con.prepareStatement(sql2);
		
		pstmt.setInt(1, dto.getNo());
		pstmt.setString(2, adto.getFile1());
		pstmt.setString(3, adto.getFile2());
		pstmt.setString(4, adto.getFile3());
		pstmt.setString(5, adto.getFile4());
		pstmt.setString(6, adto.getFile5());
		pstmt.setString(7, adto.getFile6());
		pstmt.setString(8, adto.getFile7());
		pstmt.setString(9, adto.getFile8());
		pstmt.setString(10, adto.getFile9());
		pstmt.setString(11, adto.getFile10());
		pstmt.setString(12, adto.getFile11());
		pstmt.setString(13, adto.getFile12());
		pstmt.setString(14, adto.getFile13());
		pstmt.setString(15, adto.getFile14());
		pstmt.setString(16, adto.getFile15());
		pstmt.setString(17, adto.getFile16());
		pstmt.setString(18, adto.getFile17());
		pstmt.setString(19, adto.getFile18());
		pstmt.setString(20, adto.getFile19());
		pstmt.setString(21, adto.getFile20());
		
		int result = pstmt.executeUpdate();
		
		DBUtil.close(con, pstmt);
		
		return result;
		
	}// end of attachmentWrite
		
		
		
	public int categoryWrite(SellDTO dto, CategoryDTO cdto)throws Exception{
		
		Connection con = DBUtil.getConnection();
		
		String sql3 = " insert intro category(no, sell_no, distance, price, model, brand, grade, cartype, year, location, fuel, "
		+ " carnumber, carclass, spec, color, trans) "
		+ " values(category_seq, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		//                       1              6             11          15
		
		PreparedStatement pstmt = con.prepareStatement(sql3);
		
		pstmt.setInt(1, dto.getNo());
		pstmt.setInt(2, cdto.getDistance());
		pstmt.setInt(3, cdto.getPrice());
		pstmt.setString(4, cdto.getModel());
		pstmt.setString(5, cdto.getBrand());
		pstmt.setString(6, cdto.getGrade());
		pstmt.setString(7, cdto.getCartype());
		pstmt.setString(8, cdto.getYear());
		pstmt.setString(9, cdto.getLocation());
		pstmt.setString(10, cdto.getFuel());
		pstmt.setString(11, cdto.getCarnumber());
		pstmt.setString(12, cdto.getCarclass());
		pstmt.setString(13, cdto.getSpec());
		pstmt.setString(14, cdto.getColor());
		pstmt.setString(15, cdto.getTrans());
		
		int result = pstmt.executeUpdate();
		
		DBUtil.close(con, pstmt);
		
		return result;
		
	}//end of categoryWrite()
	public int caroptionWrite(SellDTO dto, CarOptionDTO odto)throws Exception{
	
		Connection con = DBUtil.getConnection();
		
		String sql4 = " insert into caroption(opno, sell_no, navi, sun, smart, wind, cruz, handle, ldws, aeb, airbag, mirror, "
				+ " tpms, trunk, autolight, wipper, parking, hot, bluetooth, hipass, sheet, wheel, pano, ledlignt, airsus) "
				+ " values(opno_seq, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		//                           1              6             11             16             21       24
		
		PreparedStatement pstmt = con.prepareStatement(sql4);
		
		pstmt.setInt(1, dto.getNo());
		pstmt.setInt(2, odto.getNavi());
		pstmt.setInt(3, odto.getSun());
		pstmt.setInt(4, odto.getSmart());
		pstmt.setInt(5, odto.getWind());
		pstmt.setInt(6, odto.getCruz());
		pstmt.setInt(7, odto.getHandle());
		pstmt.setInt(8, odto.getLdws());
		pstmt.setInt(9, odto.getAeb());
		pstmt.setInt(10, odto.getAirbag());
		pstmt.setInt(11, odto.getMirror());
		pstmt.setInt(12, odto.getTpms());
		pstmt.setInt(13, odto.getTrunk());
		pstmt.setInt(14, odto.getAutolight());
		pstmt.setInt(15, odto.getWipper());
		pstmt.setInt(16, odto.getParking());
		pstmt.setInt(17, odto.getHot());
		pstmt.setInt(18, odto.getBluetooth());
		pstmt.setInt(19, odto.getHipass());
		pstmt.setInt(20, odto.getSheet());
		pstmt.setInt(21, odto.getWheel());
		pstmt.setInt(22, odto.getPano());
		pstmt.setInt(23, odto.getLedlight());
		pstmt.setInt(24, odto.getAirsus());
		
		int result = pstmt.executeUpdate();
		
		DBUtil.close(con, pstmt);
		
		return result;
		
	}
	
}// end of sell
