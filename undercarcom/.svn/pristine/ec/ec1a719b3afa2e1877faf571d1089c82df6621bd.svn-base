package com.undercar.sell.controller;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.oreilly.servlet.MultipartRequest;
import com.oreilly.servlet.multipart.DefaultFileRenamePolicy;
import com.undercar.attachment.dto.AttachmentDTO;
import com.undercar.caritems.dto.CarItemsDTO;
import com.undercar.caroption.dto.CarOptionDTO;
import com.undercar.main.Controller;
import com.undercar.main.Execute;
import com.undercar.main.Service;
import com.undercar.member.dto.LoginDTO;
import com.undercar.message.dto.MessageDTO;
import com.undercar.sell.dto.SellDTO;
import com.undercar.sell.service.KModelListService;
import com.undercar.util.io.FileUtil;
import com.undercar.util.page.PageObject;
import com.webjjang.util.ImageResizing;

public class SellController implements Controller{

	private Service sellListService;
	private Service carBrandListService;
	private Service carClassListService;
	private Service kModelListService;
	private Service hModelListService;
	private Service sModelListService;
	private Service ssModelListService;
	private Service gmModelListService;
	private Service sellWriteService;
	private Service attachmentWriteService;
	private Service caroptionWriteService;
	private Service sellViewService;
	
	
	
	public SellController(Service sellListService, Service carBrandListService, Service carClassListService, Service kModelListService, 
			Service hModelListService, Service sModelListService, Service ssModelListService, Service gmModelListService, Service sellWriteService,
			Service attachmentWriteService, Service caroptionWriteService, Service sellViewService) {
		
		this.sellListService = sellListService;
		this.carBrandListService = carBrandListService;
		this.carClassListService = carClassListService;
		this.kModelListService = kModelListService;
		this.hModelListService = hModelListService;
		this.sModelListService = sModelListService;
		this.ssModelListService = ssModelListService;
		this.gmModelListService = gmModelListService;
		this.sellWriteService = sellWriteService;
		this.attachmentWriteService = attachmentWriteService;
		this.caroptionWriteService = caroptionWriteService;
		this.sellViewService = sellViewService;
		
	}
		
	int size = 100*1024*1024;
	
	String path = "/upload/selImage/";
	
	String noStr="";
	
	String sell_NoStr = "";
	
	String perPageNumStr = "";
	
	String deleteFileName = null;
	
//	@SuppressWarnings("unchecked")
	@Override
	public String execute(HttpServletRequest request, HttpServletResponse response, String uri) throws Exception {
		// TODO Auto-generated method stub
		
		String jsp ="";
		PageObject pageObject = PageObject.getInstance(request.getParameter("page"), 
				request.getParameter("strPerPageNum"));
		
		// 검색
		String key = request.getParameter("key");
		String word = request.getParameter("word");
		if(word != null) {
			pageObject.setKey(key);
			pageObject.setWord(word);
		}// end of if
		
		switch(uri) {
		case "/sell/list.do":
			request.setAttribute("pageObject", pageObject);
			request.setAttribute("list", Execute.service(sellListService, pageObject));
			request.setAttribute("categoryList", Execute.service(sellListService));
			jsp = "sell/list";
			break;
			
		case "/sell/writeForm.do":
			request.setAttribute("carBrandList", Execute.service(carBrandListService));
			request.setAttribute("carClassList", Execute.service(carClassListService));
			request.setAttribute("kModelList", Execute.service(kModelListService));
			request.setAttribute("hModelList", Execute.service(hModelListService));
			request.setAttribute("sModelList", Execute.service(sModelListService));
			request.setAttribute("ssModelList", Execute.service(ssModelListService));
			request.setAttribute("gmModelList", Execute.service(gmModelListService));
			System.out.println(request.getAttribute("carBrandList"));
			System.out.println("carItemsList -->"+request.getAttribute("carItemsList"));
//			List<CarItemsDTO> list = (List<CarItemsDTO>) Execute.service(carItemsListService);
//			CarItemsDTO cidto;
//			List<String> model = new ArrayList<String>();
//			List<Object> year = new ArrayList<Object>();
//			List<String> cargrade = new ArrayList<String>();
//			for(int i = 0; i < list.size(); i++) {
//				cidto = list.get(i);
////				System.out.println("List dto -->>"+ dto);
//				while(!model.contains(cidto.getModel())) {
//					model.add(cidto.getModel());
////					request.setAttribute("carItems", model);
////					System.out.println("Item lsit -->>" + model);
//				}
//				while(!year.contains(cidto.getYear())) {
//					year.add(cidto.getYear());
////					year.add(cidto.getGrade());
//					request.setAttribute("carItems", year);
////					request.setAttribute("carItems", cargrade);
//				}
//				while(!cargrade.contains(cidto.getGrade())) {
//					cargrade.add(cidto.getGrade());
//					request.setAttribute("carItems", cargrade);
//				}
//				
//			}
//			System.out.println("model : "+model.toString());
//			System.out.println("year : "+year.toString());
//			System.out.println("cargrade : "+cargrade.toString());
			jsp = "sell/writeForm";
			break;
			
		case "/sell/write.do":
			String writer = ((LoginDTO) request.getSession().getAttribute("login")).getName();
			Execute.service(sellWriteService, getSellDTO(Integer.parseInt("condition")
					, Integer.parseInt("grade"), request.getParameter("content"), writer));
			Execute.service(attachmentWriteService,getDTO(request));
			Execute.service(caroptionWriteService, getCaroptionDTO(Integer.parseInt("navi"), Integer.parseInt("sun"), Integer.parseInt("smart"), Integer.parseInt("wind"), 
					Integer.parseInt("cruz"), Integer.parseInt("handle"), Integer.parseInt("ldws"), Integer.parseInt("aeb"), Integer.parseInt("airbag"), Integer.parseInt("mirror"), Integer.parseInt("tpms"), 
					Integer.parseInt("trunk"), Integer.parseInt("autolight"), Integer.parseInt("wipper"), Integer.parseInt("parking"), Integer.parseInt("hot"), Integer.parseInt("bluetooth"), Integer.parseInt("hipass"), 
					Integer.parseInt("sheet"), Integer.parseInt("wheel"), Integer.parseInt("pano"), Integer.parseInt("ledlight"), Integer.parseInt("airsus"), request.getParameter("caropct"), Integer.parseInt("sell_no")));
			jsp = "redirect:list.do?page=1&perPageNum="+perPageNumStr;
		default:
			break;
		}//end of switch
		System.out.println("SellController.execute().jsp:" + jsp);
		return jsp;
	}// end of execute
	
	// 글쓰기 할때 sellWriteService에 사용되는 메서드
	private SellDTO getSellDTO(int condition, int grade, String content, String writer) {
						
		SellDTO dto = new SellDTO();
		
		dto.setCondition(condition);
		dto.setGrade(grade);
		dto.setContent(content);
		dto.setWriter(writer);
		
		return dto;
		
	}//end of getSellDTO()
	
	// 글쓰기 할때 caroptionWriteService
	private CarOptionDTO getCaroptionDTO(int navi, int sun, int smart, int wind, int cruz, int handle, int ldws, int aeb, int airbag,
			int mirror, int tpms, int trunk, int autolight, int wipper, int parking, int hot, int bluetooth,
			int hipass, int sheet, int wheel, int pano, int ledlight, int airsus, String content, int sell_no) {
		
		CarOptionDTO codto = new CarOptionDTO();
		
		codto.setNavi(navi);
		codto.setSun(sun);
		codto.setSmart(smart);
		codto.setWind(wind);
		codto.setCruz(cruz);
		codto.setHandle(handle);
		codto.setLdws(ldws);
		codto.setAeb(aeb);
		codto.setAirbag(airbag);
		codto.setMirror(mirror);
		codto.setTpms(tpms);
		codto.setTrunk(trunk);
		codto.setAutolight(autolight);
		codto.setWipper(wipper);
		codto.setParking(parking);
		codto.setHot(hot);
		codto.setBluetooth(bluetooth);
		codto.setHipass(hipass);
		codto.setSheet(sheet);
		codto.setWheel(wheel);
		codto.setPano(pano);
		codto.setLedlight(ledlight);
		codto.setAirsus(airsus);
		codto.setContent(content);
		codto.setSell_no(sell_no);
		
		return codto;
		
		
		
	}
	
	// sell삭제를 위한 dto 가져오기
	private SellDTO getSellDTO(HttpServletRequest request, int no) throws Exception {
		SellDTO dto = (SellDTO) Execute.service(sellViewService, no, 0);
		return dto;
	}
	// 주로 글쓰기할때 첨부파일에 사용되는 메서드
	private AttachmentDTO getDTO(int sell_no, String file1, String file2, String file3, String file4, String file5, String file6, String file7, 
			String file8, String file9, String file10, String file11, String file12, String file13, String file14, String file15, String file16, 
			String file17, String file18, String file19, String file20) {
		AttachmentDTO dto = new AttachmentDTO();
		dto.setSell_no(sell_no);
		// 이미지 등록 시 에는 반드시 입력되어야 한다.
		// 그러나 수정 시에는 이미지를 그대로 사용하고자 할때는 변경되지 않는다. -> 데이터가 들어오지 않는다.
		if(file1 != null && !file1.equals("") 
				&& !file1.equals(path+"null"))
			dto.setFile1(file1);
		
		if(file2 != null && !file2.equals("") 
				&& !file2.equals(path+"null"))
			dto.setFile2(file2);
		
		if(file3 != null && !file3.equals("") 
				&& !file3.equals(path+"null"))
			dto.setFile3(file3);
		
		if(file4 != null && !file4.equals("") 
				&& !file4.equals(path+"null"))
			dto.setFile4(file4);
		
		if(file5 != null && !file5.equals("") 
				&& !file5.equals(path+"null"))
			dto.setFile5(file5);
		
		if(file6 != null && !file6.equals("") 
				&& !file6.equals(path+"null"))
			dto.setFile6(file6);
		
		if(file7 != null && !file7.equals("") 
				&& !file7.equals(path+"null"))
			dto.setFile7(file7);
		
		if(file8 != null && !file8.equals("") 
				&& !file8.equals(path+"null"))
			dto.setFile8(file8);
		
		if(file9 != null && !file9.equals("") 
				&& !file9.equals(path+"null"))
			dto.setFile9(file9);
		
		if(file10 != null && !file10.equals("") 
				&& !file10.equals(path+"null"))
			dto.setFile10(file10);
		
		if(file11 != null && !file11.equals("") 
				&& !file11.equals(path+"null"))
			dto.setFile11(file11);
		
		if(file12 != null && !file12.equals("") 
				&& !file12.equals(path+"null"))
			dto.setFile12(file12);
		
		if(file13 != null && !file13.equals("") 
				&& !file13.equals(path+"null"))
			dto.setFile13(file13);
		
		if(file14 != null && !file14.equals("") 
				&& !file14.equals(path+"null"))
			dto.setFile14(file14);
		
		if(file15 != null && !file15.equals("") 
				&& !file15.equals(path+"null"))
			dto.setFile15(file15);
		
		if(file16 != null && !file16.equals("") 
				&& !file16.equals(path+"null"))
			dto.setFile16(file16);
		
		if(file17 != null && !file17.equals("") 
				&& !file17.equals(path+"null"))
			dto.setFile17(file17);
		
		if(file18 != null && !file18.equals("") 
				&& !file18.equals(path+"null"))
			dto.setFile18(file18);
		
		if(file19 != null && !file19.equals("") 
				&& !file19.equals(path+"null"))
			dto.setFile19(file19);
		
		if(file20 != null && !file20.equals("") 
				&& !file20.equals(path+"null"))
			dto.setFile20(file20);

		return dto;
	}
	
	// 주로 글수정할때 첨부파일 사용되는 메서드
	private AttachmentDTO getDTO(int no, int sell_no, String file1, String file2, String file3, String file4, String file5, String file6, String file7, 
			String file8, String file9, String file10, String file11, String file12, String file13, String file14, String file15, String file16, 
			String file17, String file18, String file19, String file20) {
		AttachmentDTO dto = getDTO(sell_no, file1, file2, file3, file4, file5, file6, file7, file8, file9, file10, file11, file12, file13, file14, 
				file15, file16, file17, file18, file19, file20);
		dto.setNo(sell_no);
		
		return dto;
	}
	
	private AttachmentDTO getDTO(HttpServletRequest request) throws Exception {
		
		// 파일을 업로드할 서버의 절대위치 : 하드디스트의 위치
		String uploadPath = FileUtil.realPath(request, path);
		System.out.println(uploadPath);
		// new MultipartRequest(request, 파일이올라간하드디스크의위치와파일명,
		// 용량제한, 엔코딩, 중복처리프로그램) - 생성이되면 첨부파일이 바로 올라간다.
		MultipartRequest multi = new MultipartRequest(request, uploadPath,
				size, "utf-8",	new DefaultFileRenamePolicy());

		// DB에 저장할 첨부파일 정보 : 웹위치+서버의파일명
		String file1 = path + multi.getFilesystemName("file1");
		String file2 = path + multi.getFilesystemName("file2");
		String file3 = path + multi.getFilesystemName("file3");
		String file4 = path + multi.getFilesystemName("file4");
		String file5 = path + multi.getFilesystemName("file5");
		String file6 = path + multi.getFilesystemName("file6");
		String file7 = path + multi.getFilesystemName("file7");
		String file8 = path + multi.getFilesystemName("file8");
		String file9 = path + multi.getFilesystemName("file9");
		String file10 = path + multi.getFilesystemName("file10");
		String file11 = path + multi.getFilesystemName("file11");
		String file12 = path + multi.getFilesystemName("file12");
		String file13 = path + multi.getFilesystemName("file13");
		String file14 = path + multi.getFilesystemName("file14");
		String file15 = path + multi.getFilesystemName("file15");
		String file16 = path + multi.getFilesystemName("file16");
		String file17 = path + multi.getFilesystemName("file17");
		String file18 = path + multi.getFilesystemName("file18");
		String file19 = path + multi.getFilesystemName("file19");
		String file20 = path + multi.getFilesystemName("file20");
		System.out.println("ImageController.execute().fileName:" + file1);
		
		// 저장된 파일 사이즈를 줄여서 리스트에 표시하기 위한 파일로 복사 -> dog01.jpg => s_dog01.jpg
		// webjjangma 카페에서 업로드 검색 리사이징 프로그램 참조 + 라이브러리 등록해서 사용
		// ImageResizing.imageResizing(realPath, 이미지 파일명, 앞첨자, 너비, 높이)
		// 첨부파일이 있는 경우만 처리를 한다. 첨부가 없는 경우 fileName
		if(file1 != null && !file1.equals("")
				&& !file1.equals(path + "null"))
			ImageResizing.imageResizing(uploadPath,
					multi.getFilesystemName("file1"), "s_", 300);
		
		// 한페이지에 표시할 데이터의 갯수
		perPageNumStr = multi.getParameter("perPageNum");

		sell_NoStr = multi.getParameter("sell_no");
		
		noStr = multi.getParameter("no");
		
		// 글번호가 들어오면 - 업데이터(수정)
		if(noStr != null && !noStr.equals("")) {
			// 원래의 파일명을 셋팅한다.
			deleteFileName = multi.getParameter("deleteFile");
			return getDTO(Integer.parseInt(noStr),
					Integer.parseInt("sell_no"),
					file1, file2, file3, file4, file5, file6, file7, file8, file9, file10, file11, file12, file13, file14, 
					file15, file16, file17, file18, file19, file20);
		}
		// 글번호가 들어오지 않으면 - 글쓰기
		return getDTO(Integer.parseInt(sell_NoStr),
				file1, file2, file3, file4, file5, file6, file7, file8, file9, file10, file11, file12, file13, file14, 
				file15, file16, file17, file18, file19, file20);
	}
	
}//end of SellController
